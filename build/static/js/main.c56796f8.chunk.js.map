{"version":3,"sources":["constants/actionTypes.js","components/Review.js","components/Questions.js","components/Result.js","components/Quiz.js","App.js","middleware.js","reducers/quiz.js","reducer.js","store.js","index.js"],"names":["ActionTypes","Review","isAnswered","q","options","some","x","selected","className","this","props","quiz","name","questions","map","index","key","id","onClick","move","Component","Questions","question","option","JSON","parse","stringify","find","questionTypeId","forEach","onAnswer","slice","pager","size","count","htmlFor","checked","type","onChange","config","allowBack","connect","state","mode","dispatch","payload","Result","isCorrect","every","isAnswer","disabled","Quiz","e","target","parseInt","onPagerUpdate","setMode","onSubmit","renderMode","App","quizes","quizId","setState","value","load","url","fetch","then","res","json","o","Object","assign","length","onQuizLoad","promiseMiddleware","store","next","action","initialQuiz","combineReducers","console","log","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c56796f8.chunk.js","sourcesContent":["\r\nexport const ActionTypes = {\r\n    QuizLoad: 'QuizLoad',\r\n    QuizAnswer: 'QuizAnswer',\r\n    QuizSubmit: 'QuizSubmit',\r\n    PagerUpdate: 'PagerUpdate'\r\n}","import React, { Component } from 'react';\r\n\r\nclass Review extends Component {\r\n    isAnswered = (q) => {\r\n        return q.options.some(x => x.selected) ? 'Answered' : 'Not Answered';\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <h2 className=\"text-center font-weight-normal\">Review Quiz: {this.props.quiz.name}</h2>\r\n            <hr />\r\n            <div className=\"row text-center\">\r\n                {this.props.quiz.questions.map((q, index) =>\r\n                    <div key={q.id} className=\"col-4 cursor-pointer\">\r\n                        <div id={index} onClick={this.props.move} className={`p-3 mb-2 ${this.isAnswered(q) === 'Answered' ? 'bg-info' : 'bg-warning'}`}>{index + 1}. {this.isAnswered(q)}</div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div >\r\n    }\r\n}\r\n\r\nexport default Review;","import React, { Component } from 'react';\r\nimport { ActionTypes } from '../constants/actionTypes';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => ({ ...state.quiz, ...state.mode, ...state.pager });\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onAnswer: payload => dispatch({ type: ActionTypes.QuizAnswer, payload })\r\n});\r\n\r\nclass Questions extends Component {\r\n\r\n    onAnswer(question, option) {\r\n        let quiz = JSON.parse(JSON.stringify(this.props.quiz));\r\n        let q = quiz.questions.find(x => x.id === question.id);\r\n        if (q.questionTypeId === 1) {\r\n            q.options.forEach((x) => { x.selected = false; });\r\n        }\r\n        q.options.find(x => x.id === option.id).selected = true;\r\n        this.props.onAnswer(quiz);\r\n    }\r\n\r\n    render() {\r\n        let questions = (this.props.quiz.questions) ?\r\n            this.props.quiz.questions.slice(this.props.pager.index, this.props.pager.index + this.props.pager.size) : [];\r\n        return (\r\n            <div id=\"quiz\">\r\n                <h2 className=\"text-center font-weight-normal\">{this.props.quiz.name}</h2>\r\n                <hr />\r\n                {questions.map(q =>\r\n                    <div key={q.id}>\r\n                        <div className=\"badge badge-primary\"> Question {this.props.pager.index + 1} of {this.props.pager.count}.</div>\r\n                        <h3 className=\"font-weight-normal\">{this.props.pager.index + 1}. <span>{q.name}</span></h3>\r\n                        <div className=\"row text-left options\">\r\n                            {\r\n                                q.options.map(option =>\r\n                                    <div key={option.id} className=\"col-6\">\r\n                                        <div className=\"option\">\r\n                                            <label className=\"font-weight-normal\" htmlFor={option.id}>\r\n                                                <input id={option.id} checked={option.selected} type=\"checkbox\" onChange={() => this.onAnswer(q, option)} />\r\n                                                {option.name}\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <hr />\r\n                <div className=\"text-center\">\r\n                    {this.props.quiz.config.allowBack && <button id=\"first\" className=\"btn-primary\" onClick={this.props.move}>First</button>}\r\n                    {this.props.quiz.config.allowBack && <button id=\"prev\" className=\"btn-primary\" onClick={this.props.move}>Prev</button>}\r\n                    <button id=\"next\" className=\"btn-primary\" onClick={this.props.move}>Next</button>\r\n                    <button id=\"last\" className=\"btn-primary\" onClick={this.props.move}>Last</button>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","import React from 'react';\r\n\r\nfunction Result(props) {\r\n    let questions = props.questions;\r\n    questions.forEach(q => { q.isCorrect = q.options.every(x => x.selected === x.isAnswer); })\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            <h2 className=\"text-center font-weight-normal\">Quiz Result</h2>\r\n            {questions.map((q, index) =>\r\n                <div key={q.id} className={`mb-2 ${q.isCorrect ? 'bg-success' : 'bg-danger'}`}>\r\n                    <div className=\"result-question\">\r\n                        <h5>{index + 1}. {q.name}</h5>\r\n                        <div className=\"row\">\r\n                            {\r\n                                q.options.map(option =>\r\n                                    <div key={option.id} className=\"col-6\">\r\n                                        <input id={option.id} type=\"checkbox\" disabled=\"disabled\" checked={option.selected} /> {option.name}\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div className={`m-1 p-1 text-bold ${q.isCorrect ? 'text-success' : 'text-danger'}`}>Your answer is {q.isCorrect ? 'Correct' : 'Wrong'}.</div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\r\nimport { ActionTypes } from '../constants/actionTypes';\r\nimport Review from './Review';\r\nimport Questions from './Questions';\r\nimport Result from './Result';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => { return { ...state.quiz, ...state.mode, ...state.pager } };\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: payload => dispatch({ type: ActionTypes.QuizSubmit, payload }),\r\n    onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\r\n});\r\n\r\nclass Quiz extends Component {\r\n    move = (e) => {\r\n        let id = e.target.id;\r\n        let index = 0;\r\n        if (id === 'first')\r\n            index = 0;\r\n        else if (id === 'prev')\r\n            index = this.props.pager.index - 1;\r\n        else if (id === 'next')\r\n            index = this.props.pager.index + 1;\r\n        else if (id === 'last')\r\n            index = this.props.pager.count - 1;\r\n        else\r\n            index = parseInt(e.target.id, 10);\r\n\r\n        if (index >= 0 && index < this.props.pager.count) {\r\n            let pager = {\r\n                index: index,\r\n                size: 1,\r\n                count: this.props.pager.count\r\n            };\r\n            this.props.onPagerUpdate(pager);\r\n        }\r\n    }\r\n\r\n    setMode = (e) => this.props.onSubmit(e.target.id);\r\n\r\n    renderMode() {\r\n        if (this.props.mode === 'quiz') {\r\n            return (<Questions move={this.move} />)\r\n        } else if (this.props.mode === 'review') {\r\n            return (<Review quiz={this.props.quiz} move={this.move} />)\r\n        } else {\r\n            return (<Result questions={this.props.quiz.questions || []} />)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderMode()}\r\n                {(this.props.mode !== 'submit') &&\r\n                    <div>\r\n                        <hr />\r\n                        <button id=\"quiz\" className=\"btn-primary\" onClick={this.setMode}>Quiz</button>\r\n                        <button id=\"review\" className=\"btn-primary\" onClick={this.setMode}>Review</button>\r\n                        <button id=\"submit\" className=\"btn-primary\" onClick={this.setMode}>Submit Quiz</button >\r\n                    </div >}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React, { Component } from 'react';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport { connect } from 'react-redux';\nimport { ActionTypes } from './constants/actionTypes';\n\nconst mapStateToProps = state => { return { ...state.quiz } };\n\nconst mapDispatchToProps = dispatch => ({\n  onQuizLoad: payload => dispatch({ type: ActionTypes.QuizLoad, payload }),\n  onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\n});\n\nclass App extends Component {\n  state = {\n    quizes: [\n      { id: 'data/javascript.json', name: 'Javascript' }\n    ],\n    quizId: 'data/javascript.json'\n  };\n\n  pager = {\n    index: 0,\n    size: 1,\n    count: 1\n  }\n\n  componentDidMount() {\n    this.load(this.state.quizId);\n  }\n\n  load(quizId) {\n    let url = quizId || this.props.quizId;\n    fetch(`../${url}`).then(res => res.json()).then(res => {\n      let quiz = res;\n      quiz.questions.forEach(q => {\n        q.options.forEach(o => o.selected = false);\n      });\n      quiz.config = Object.assign(this.props.quiz.config || {}, quiz.config);\n      this.pager.count = quiz.questions.length / this.pager.size;\n      this.props.onQuizLoad(quiz);\n      this.props.onPagerUpdate(this.pager);\n    });\n  }\n\n  onChange = (e) => {\n    this.setState({ quizId: e.target.value });\n    this.load(e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"p-2\">\n          <div className=\"row\">\n            <div className=\"col-4\">\n              <h3>Quiz Application</h3>\n            </div>\n          </div>\n        </header>\n        <Quiz quiz={this.state.quiz} quizId={this.state.quizId} mode={this.state.mode} />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\r\nimport { } from './constants/actionTypes';\r\n\r\nconst promiseMiddleware = store => next => action => {\r\n    \r\n    next(action);\r\n};\r\n\r\nexport { promiseMiddleware }","import {\r\n    ActionTypes\r\n} from '../constants/actionTypes';\r\n\r\nlet initialQuiz = {\r\n    quiz: {\r\n        config: {\r\n            'allowBack': true,\r\n            'allowReview': true,\r\n            'autoMove': false,  \r\n            'duration': 0,  \r\n            'pageSize': 1,\r\n            'requiredAll': false, \r\n            'richText': false,\r\n            'shuffleQuestions': false,\r\n            'shuffleOptions': false,\r\n            'showClock': false,\r\n            'showPager': true,\r\n            'theme': 'none'\r\n        },\r\n        questions: []\r\n    },\r\n    mode: 'quiz',\r\n    pager: {\r\n        index: 0,\r\n        size: 1,\r\n        count: 1\r\n    }\r\n}\r\n\r\nexport default (state = { ...initialQuiz }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.PagerUpdate:\r\n            return {\r\n                ...state, pager: action.payload, mode: 'quiz'\r\n            }\r\n        case ActionTypes.QuizLoad:\r\n            return {\r\n                ...state, quiz: action.payload\r\n            }\r\n        case ActionTypes.QuizSubmit:\r\n            console.log('quiz.js Submitted.');\r\n            return {\r\n                ...state, mode: action.payload\r\n            }\r\n        case ActionTypes.QuizAnswer:\r\n            console.log('quiz.js reducer Quiz Answer called.');\r\n            return {\r\n                ...state, quiz: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import quiz from './reducers/quiz';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  quiz\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\nimport { promiseMiddleware } from './middleware';\r\nimport reducer from './reducer';\r\n\r\nconst getMiddleware = () => {\r\n    if (process.env.NODE_ENV === 'production') {\r\n        return applyMiddleware(promiseMiddleware);\r\n    } else {\r\n        return applyMiddleware(promiseMiddleware)\r\n    }\r\n};\r\n\r\nexport const store = createStore(reducer, composeWithDevTools(getMiddleware()));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { store } from './store';\n\n\n\nReactDOM.render(<Provider store= {store}><App/></Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}